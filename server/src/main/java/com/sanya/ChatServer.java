package com.sanya;

import com.ancevt.replines.core.argument.Arguments;
import com.sanya.files.FileChunk;
import com.sanya.files.FileTransferRequest;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–∞–π–ª–æ–≤.
 */
public class ChatServer {

    private static int port;
    private static final Map<ObjectOutputStream, String> clients = new ConcurrentHashMap<>();

    public static void main(String[] args) throws IOException {
        Arguments a = Arguments.parse(args);
        port = a.get(int.class, "--port", 12345);

        System.setProperty("file.encoding", "UTF-8");
        System.setOut(new PrintStream(System.out, true, StandardCharsets.UTF_8));
        System.out.println("Server started on port " + port);

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            while (true) {
                Socket socket = serverSocket.accept();
                new Thread(new ClientHandler(socket), "ClientHandler-" + socket.getPort()).start();
            }
        }
    }

    private static class ClientHandler implements Runnable {
        private final Socket socket;
        private String clientName;
        private ObjectOutputStream out;
        private ObjectInputStream in;

        ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                out = new ObjectOutputStream(socket.getOutputStream());
                in = new ObjectInputStream(socket.getInputStream());

                // –ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç ‚Äî Message –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º
                Message hello = (Message) in.readObject();
                clientName = hello.getFrom();

                clients.put(out, clientName);
                System.out.println("Client connected: " + clientName);

                broadcast(new Message("SERVER", clientName + " entered the chat", Message.Type.SYSTEM));
                updateUserList();

                while (true) {
                    Object obj = in.readObject();

                    if (obj instanceof Message msg) {
                        System.out.println("[" + msg.getFrom() + "]: " + msg.getText());
                        broadcast(msg);
                    }
                    else if (obj instanceof FileTransferRequest req) {
                        System.out.println("üìÅ " + clientName + " is sending file: " + req.getFilename());
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        Message notifyMsg = new Message("SERVER",
                                req.getSender() + " –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª: " + req.getFilename() + " (" + req.getSize() + " –±–∞–π—Ç)",
                                Message.Type.SYSTEM);
                        broadcast(notifyMsg);

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ø—Ä–∏–Ω—è—Ç—å)
                        broadcast(req);
                    }
                    else if (obj instanceof FileChunk chunk) {
                        broadcast(chunk); // –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫—É—Å–∫–∏ —Ñ–∞–π–ª–∞ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
                    }
                }

            } catch (Exception e) {
                handleDisconnect();
            }
        }

        private void handleDisconnect() {
            if (clientName != null) {
                System.out.println("Client disconnected: " + clientName);
                clients.remove(out);

                broadcast(new Message("SERVER", clientName + " left the chat", Message.Type.SYSTEM));
                updateUserList();
            }
            try {
                socket.close();
            } catch (IOException ignored) {}
        }
    }

    private static void broadcast(Object obj) {
        clients.keySet().removeIf(out -> {
            try {
                out.writeObject(obj);
                out.flush();
                return false;
            } catch (IOException e) {
                return true;
            }
        });
    }

    private static void updateUserList() {
        String userList = String.join(",", clients.values());
        broadcast(new Message("SERVER", "[SERVER] users: " + userList, Message.Type.SYSTEM));
    }
}
