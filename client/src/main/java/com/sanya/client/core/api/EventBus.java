package com.sanya.client.core.api;

import java.util.function.Consumer;

/**
 * Минимальный интерфейс шины событий (EventBus).
 * Определяет базовые операции для подписки и публикации событий.
 *
 * Назначение:
 *  - Декуплировать модули приложения через событийное взаимодействие.
 *  - Упрощать реакцию на события без прямых зависимостей между компонентами.
 *  - Позволять подмену реализации (например, локальная, распределённая, через Kafka и т.д.)
 *
 * Использование:
 *  Клиенты могут подписываться на события конкретного типа и публиковать новые события,
 *  не зная, кто их обработает.
 */
public interface EventBus {

    /**
     * Подписывает обработчик на события указанного типа.
     *
     * @param type    класс события
     * @param handler обработчик, принимающий экземпляр события
     * @param <T>     тип события
     */
    <T> void subscribe(Class<T> type, Consumer<? super T> handler);

    /**
     * Публикует событие в шину для доставки всем подписчикам.
     *
     * @param event объект события (любой тип)
     */
    void publish(Object event);
}
