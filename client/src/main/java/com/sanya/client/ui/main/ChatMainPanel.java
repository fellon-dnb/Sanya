package com.sanya.client.ui.main;

import com.sanya.client.ApplicationContext;
import com.sanya.client.ui.NotificationManager;
import com.sanya.client.ui.dialog.ChatVoiceDialog;
import com.sanya.client.service.audio.VoiceService;
import com.sanya.events.Theme;
import com.sanya.events.ThemeChangedEvent;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.util.List;



/**
 * –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ñ–∞–π–ª–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
public class ChatMainPanel extends JPanel {

    private final ApplicationContext ctx;
    private final JTextPane chatPane = new JTextPane();
    private final DefaultListModel<String> userListModel = new DefaultListModel<>();
    private final JList<String> userList = new JList<>(userListModel);
    private final JLabel recordStatusLabel = new JLabel(" ");
    private final StyledDocument doc = chatPane.getStyledDocument();
    private Timer recTimer;
    private boolean recBlink;
    public ChatMainPanel(ApplicationContext ctx) {
        this.ctx = ctx;
        setLayout(new BorderLayout());

        // === –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ ===
        StyleContext sc = StyleContext.getDefaultStyleContext();

        javax.swing.text.Style def = sc.addStyle("default", null);
        def.addAttribute(javax.swing.text.StyleConstants.FontFamily, "Segoe UI");
        def.addAttribute(javax.swing.text.StyleConstants.FontSize, 13);
        def.addAttribute(javax.swing.text.StyleConstants.Foreground, Color.WHITE);
        doc.addStyle("default", def);

        javax.swing.text.Style sys = sc.addStyle("system", def);
        sys.addAttribute(javax.swing.text.StyleConstants.Foreground, new Color(150, 150, 150));
        doc.addStyle("system", sys);

        // === –°—Ç—Ä–æ–∏–º UI ===
        buildUI();

        // === –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Ç–µ–º—ã ===
        ctx.getEventBus().subscribe(ThemeChangedEvent.class, e ->
                SwingUtilities.invokeLater(() -> applyTheme(e.theme())));

        // === –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ ===
        ctx.getEventBus().subscribe(com.sanya.events.VoiceLevelEvent.class,
                e -> SwingUtilities.invokeLater(() -> updateRecordingLevel(e.level())));
    }



    private void buildUI() {
        // —á–∞—Ç
        chatPane.setEditable(false);
        chatPane.setMargin(new Insets(6, 6, 6, 6));
        add(new JScrollPane(chatPane), BorderLayout.CENTER);

        // –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ (—Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–≤–æ–¥–∞)
        JPanel bottomPanel = new JPanel(new BorderLayout());
        recordStatusLabel.setHorizontalAlignment(SwingConstants.CENTER);
        bottomPanel.add(new com.sanya.client.ui.input.ChatInputPanel(ctx), BorderLayout.CENTER);
        bottomPanel.add(recordStatusLabel, BorderLayout.SOUTH);
        add(bottomPanel, BorderLayout.SOUTH);

        // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        JPanel rightPanel = new JPanel(new BorderLayout());
        rightPanel.add(new JLabel("Active users:"), BorderLayout.NORTH);
        rightPanel.add(new JScrollPane(userList), BorderLayout.CENTER);
        rightPanel.setPreferredSize(new Dimension(180, 0));
        add(rightPanel, BorderLayout.EAST);

        // –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        JButton themeBtn = new JButton("üåì");
        themeBtn.addActionListener(e -> ctx.services().theme().toggle());
        add(themeBtn, BorderLayout.NORTH);
    }


    // === –ú–µ—Ç–æ–¥—ã –¥–ª—è SwingUIFacade ===
    public void appendChatMessage(String msg) {
        appendText(msg, "default");
    }

    public void appendSystemMessage(String msg) {
        appendText(msg, "system");
    }

    public void clearChat() {
        SwingUtilities.invokeLater(() -> chatPane.setText(""));
    }

    public void updateUserList(List<String> users) {
        SwingUtilities.invokeLater(() -> {
            userListModel.clear();
            users.forEach(userListModel::addElement);
        });
    }

    public void updateFileTransferProgress(String filename, int percent, boolean outgoing) {
        // –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–º
        NotificationManager.showInfo((outgoing ? "Sending " : "Receiving ") + filename + ": " + percent + "%");
    }

    public void fileTransferCompleted(String filename, boolean outgoing) {
        NotificationManager.showInfo((outgoing ? "File sent: " : "File received: ") + filename);
    }

    public void addVoiceMessage(String username, byte[] data) {
        JButton playButton = new JButton("‚ñ∂ " + username);
        playButton.addActionListener(ev -> ctx.get(VoiceService.class).playTemp(data));
        chatPane.insertComponent(playButton);
        try {
            doc.insertString(doc.getLength(), "\n", null);
        } catch (BadLocationException ignored) {}
    }



    public void applyTheme(Theme theme) {
        SwingUtilities.invokeLater(() -> refreshThemeColors(theme));
    }


    private void appendText(String msg, String style) {
        SwingUtilities.invokeLater(() -> {
            try {
                if (doc.getLength() > 0) doc.insertString(doc.getLength(), "\n", null);
                doc.insertString(doc.getLength(), msg, doc.getStyle(style));
                chatPane.setCaretPosition(doc.getLength());
            } catch (BadLocationException ignored) {}
        });
    }
    private void refreshThemeColors(Theme theme) {
        Color bg = (theme == Theme.DARK) ? Color.BLACK : Color.WHITE;
        Color fg = (theme == Theme.DARK) ? Color.WHITE : Color.BLACK;

        chatPane.setBackground(bg);
        chatPane.setForeground(fg);
        userList.setBackground(bg);
        userList.setForeground(fg);
        recordStatusLabel.setForeground(fg);

        // –ø–µ—Ä–µ–∫—Ä–∞—Å–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        chatPane.selectAll();
        chatPane.setCharacterAttributes(chatPane.getStyle(StyleContext.DEFAULT_STYLE), true);
        chatPane.setForeground(fg);
        chatPane.setBackground(bg);
        chatPane.repaint();
    }
    private void updateRecordingLevel(double level) {
        int percent = (int) (level * 100);
        recordStatusLabel.setText("‚óè REC " + percent + "%");
        recordStatusLabel.setForeground(Color.RED);
    }
    public void setRecordingIndicator(boolean recording) {
        if (recording) {
            if (recTimer == null) {
                recTimer = new Timer(400, e -> {
                    recBlink = !recBlink;
                    recordStatusLabel.setText(recBlink ? "‚óè REC" : "");
                    recordStatusLabel.setForeground(Color.RED);
                });
            }
            if (!recTimer.isRunning()) {
                recTimer.start();
            }
        } else {
            if (recTimer != null && recTimer.isRunning()) {
                recTimer.stop();
            }
            recBlink = false;
            recordStatusLabel.setText("");
            recordStatusLabel.setForeground(getForeground());
        }
    }
}
